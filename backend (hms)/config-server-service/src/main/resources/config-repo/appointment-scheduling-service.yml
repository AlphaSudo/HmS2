# Server Configuration
server:
  port: ${SERVER_PORT_APPOINTMENT:8083}

# Spring Configuration
spring:
  # Database Configuration - Use environment variables for credentials
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${APPOINTMENT_DB_NAME:hms_appointment_db}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL:true}
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Flyway Configuration - Disabled for local development
  flyway:
    enabled: false
  
  # Kafka Configuration - Disabled for now
  # kafka:
  #   bootstrap-servers: localhost:9092
  #   producer:
  #     key-serializer: org.apache.kafka.common.serialization.StringSerializer
  #     value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  #     acks: all
  #     retries: 3
  #     properties:
  #       spring.json.add.type.headers: false
  #   consumer:
  #     group-id: appointment-service-group
  #     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #     value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  #     auto-offset-reset: earliest
  #     properties:
  #       spring.json.trusted.packages: com.pro.appointmentschedulingservice.dto.events
  #   topic:
  #     appointment-events: appointment-events
  #     patient-events: patient-events
  #     doctor-events: doctor-events

# JWT Configuration
app:
  jwt:
    secret: ${JWT_SECRET}  # Must be provided via environment variable
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173}

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:localhost}

# Logging Configuration
logging:
  level:
    com.pro.appointmentschedulingservice: ${LOG_LEVEL_APP:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
    org.flywaydb: ${LOG_LEVEL_FLYWAY:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n" 