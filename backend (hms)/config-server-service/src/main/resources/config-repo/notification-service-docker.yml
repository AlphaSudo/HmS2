# Docker Configuration for Notification Service

# Server Configuration
server:
  port: 8089

# Spring Configuration
spring:
  # Database Configuration - Using Docker service names
  datasource:
    url: jdbc:postgresql://postgres:5432/hms_notification_db
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # MongoDB Configuration - Using Docker service names
  data:
    mongodb:
      uri: mongodb://mongodb:27017/hms_notification_db
      auto-index-creation: true

  # Kafka Configuration - Using Docker service names
  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: notification-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "*"

  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# JWT Configuration
app:
  jwt:
    secret: ${JWT_SECRET}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173}

# Notification Service Docker Configuration
notification:
  email:
    enabled: ${NOTIFICATION_EMAIL_ENABLED:true}
    from: ${NOTIFICATION_EMAIL_FROM:noreply@hospital-management.com}
  sms:
    enabled: ${NOTIFICATION_SMS_ENABLED:false}
  push:
    enabled: ${NOTIFICATION_PUSH_ENABLED:false}

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    hostname: notification-service

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized

# Logging Configuration
logging:
  level:
    com.pro.notificationservice: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: WARN
    org.springframework.kafka: INFO
    org.springframework.mail: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n" 